options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: LoRa_Doppler_Effect
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: LoRa
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 40.0]
    rotation: 0
    state: enabled

blocks:
- name: SNRdB
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '-15'
    step: '3'
    stop: '0'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1240, 40.0]
    rotation: 0
    state: true
- name: bw
  id: variable
  parameters:
    comment: ''
    value: '250000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1040, 40.0]
    rotation: 0
    state: true
- name: center_freq
  id: variable
  parameters:
    comment: ''
    value: 868.1E6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 40.0]
    rotation: 0
    state: true
- name: clk_offset
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '20'
    stop: '200'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1120, 40.0]
    rotation: 0
    state: true
- name: cr
  id: variable
  parameters:
    comment: ''
    value: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [368, 40.0]
    rotation: 0
    state: enabled
- name: has_crc
  id: variable
  parameters:
    comment: ''
    value: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [440, 40.0]
    rotation: 0
    state: enabled
- name: impl_head
  id: variable
  parameters:
    comment: ''
    value: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [272, 40.0]
    rotation: 0
    state: enabled
- name: loop_bw
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: pi/1000
    step: pi/1000
    stop: pi/100
    value: pi/800
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1480, 40.0]
    rotation: 0
    state: true
- name: pay_len
  id: variable
  parameters:
    comment: ''
    value: '255'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 40.0]
    rotation: 0
    state: true
- name: preamb_len
  id: variable
  parameters:
    comment: ''
    value: '8'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 40.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: bw*4
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 40.0]
    rotation: 0
    state: enabled
- name: sf
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: int
    start: '7'
    step: '1'
    stop: '12'
    value: '7'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1360, 40.0]
    rotation: 0
    state: true
- name: soft_decoding
  id: variable
  parameters:
    comment: ''
    value: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [712, 40.0]
    rotation: 0
    state: enabled
- name: sync_word
  id: variable
  parameters:
    comment: ''
    value: '0x12'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [528, 40.0]
    rotation: 0
    state: enabled
- name: analog_pll_freqdet_cf_0
  id: analog_pll_freqdet_cf
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    max_freq: pi
    maxoutbuf: '0'
    min_freq: -pi
    minoutbuf: '0'
    w: loop_bw
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1744.0, 736]
    rotation: 270
    state: disabled
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: "/home/vinicius/Documentos/Projeto de Inicia\xE7\xE3o Cient\xEDfica/LoRa\
      \ Validado/Testes/Arquivo saida"
    type: byte
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 560.0]
    rotation: 0
    state: true
- name: blocks_file_sink_1
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: /home/vinicius/Documentos/Amostras_Transmitidas
    type: byte
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 648.0]
    rotation: 0
    state: true
- name: blocks_message_strobe_0_0
  id: blocks_message_strobe
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    msg: 'pmt.intern("TEST: 0")'
    period: '1000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [72, 256.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1752.0, 560]
    rotation: 270
    state: enabled
- name: blocks_multiply_xx_1
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1600.0, 632]
    rotation: 90
    state: disabled
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate*10
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1504, 264.0]
    rotation: 0
    state: true
- name: channels_channel_model_0
  id: channels_channel_model
  parameters:
    affinity: ''
    alias: ''
    block_tags: 'True'
    comment: ''
    epsilon: 1.0+clk_offset*1e-6
    freq_offset: '0'
    maxoutbuf: '0'
    minoutbuf: int((2**sf+2)*samp_rate/bw)
    noise_voltage: 10**(-SNRdB/20)
    seed: '0'
    taps: 1.0 + 0.0j
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1688.0, 344]
    rotation: 270
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\n\nclass blk(gr.sync_block):\n\
      \    \"\"\"Embedded Python Block - Gera\xE7\xE3o de Sinal Exponencial Complexo\
      \ com Frequ\xEAncia Variante no Tempo\"\"\"\n\n    def __init__(self, samp_rate=1.0):\n\
      \        \"\"\"Inicializa o bloco com a taxa de amostragem\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Exponencial Complexo com Frequ\xEAncia\
      \ Variante',  # Nome que aparecer\xE1 no GRC\n            in_sig=[np.float32],\
      \  # frequ\xEAncia do estimador, variante no tempo\n            out_sig=[np.complex64]\
      \  # Sinal necess\xE1rio para deslocamento na frequ\xEAncia e compensa\xE7\xE3\
      o do efeito Doppler\n        )\n        self.samp_rate = samp_rate  # taxa de\
      \ amostragem\n        self.time_index = 0  # \xEDndice de tempo inicial\n\n\
      \    def work(self, input_items, output_items):\n        \"\"\"Gera o sinal\
      \ exponencial complexo com a frequ\xEAncia de entrada\"\"\"\n        freqs =\
      \ input_items[0]  # Frequ\xEAncias de entrada (variantes no tempo)\n       \
      \ out = output_items[0]\n\n        # Gera a exponencial complexa\n        for\
      \ i in range(len(out)):\n            t = self.time_index / self.samp_rate  #\
      \ Tempo discreto\n            out[i] = np.exp(-1j * 2 * np.pi * freqs[i] * t)\
      \  # exp(j 2pi f t)\n            self.time_index += 1\n\n        return len(out)\n\
      \n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: 1E6
  states:
    _io_cache: "('Exponencial Complexo com Frequ\xEAncia Variante', 'blk', [('samp_rate',\
      \ '1.0')], [('0', 'float', 1)], [('0', 'complex', 1)], 'Embedded Python Block\
      \ - Gera\xE7\xE3o de Sinal Exponencial Complexo com Frequ\xEAncia Variante no\
      \ Tempo', ['samp_rate'])"
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1592.0, 808]
    rotation: 90
    state: disabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "import time  # Importa o m\xF3dulo time\nimport numpy as np  #\
      \ Importa o m\xF3dulo NumPy\nfrom gnuradio import gr  # Importa o m\xF3dulo\
      \ GNU Radio\n\n# Define uma classe GeradorSenoide que herda de gr.sync_block\n\
      class GeradorSenoide(gr.sync_block):\n    def __init__(self, taxa_amostragem=1.0e6):\n\
      \        # Inicializa o bloco sincronizado com um nome e define que n\xE3o h\xE1\
      \ entradas (in_sig=None)\n        # e que a sa\xEDda \xE9 complexa\n       \
      \ gr.sync_block.__init__(\n            self,\n            name='Frequ\xEAncia\
      \ Doppler',  # Nome do bloco\n            in_sig=None,  # N\xE3o h\xE1 sinal\
      \ de entrada\n            out_sig=[np.complex64],  # Define a sa\xEDda complexa\n\
      \        )\n        self.taxa_amostragem = taxa_amostragem  # Define a taxa\
      \ de amostragem em Hz\n        self.inicio_tempo = time.time()  # Salva o tempo\
      \ de in\xEDcio do bloco\n        self.frequencia_doppler = 0  # Inicializa a\
      \ frequ\xEAncia Doppler com um valor padr\xE3o de 1.0 Hz\n\n    # Fun\xE7\xE3\
      o para calcular a frequ\xEAncia Doppler com base no tempo atual\n    def calcular_frequencia_doppler(self,\
      \ tempo_atual):\n        # Retorna a frequ\xEAncia Doppler como uma fun\xE7\xE3\
      o senoidal do tempo\n        return 21948.57 * np.sin(0.001 * tempo_atual) /\
      \ np.sqrt(2.18 - (2.172 * np.cos(0.001 * tempo_atual))) # Frequ\xEAncia Doppler\
      \ Obtida atrav\xE9s do modelo\n\n    # Fun\xE7\xE3o principal do bloco que \xE9\
      \ chamada a cada itera\xE7\xE3o do fluxo de dados\n    def work(self, input_items,\
      \ output_items):\n        tempo_atual = time.time() - self.inicio_tempo  # Calcula\
      \ o tempo decorrido desde o in\xEDcio do bloco\n        \n        # Calcula\
      \ a frequ\xEAncia Doppler atual com base no tempo decorrido\n        self.frequencia_doppler\
      \ = self.calcular_frequencia_doppler(tempo_atual)\n        \n        # Cria\
      \ um vetor de tempos t baseado no n\xFAmero de amostras no buffer de sa\xED\
      da\n        t = np.arange(len(output_items[0])) / self.taxa_amostragem\n   \
      \     \n        # Calcula a fase do sinal para cada amostra usando a frequ\xEA\
      ncia Doppler\n        fase = 2 * np.pi * self.frequencia_doppler * t\n     \
      \   \n        # Gera a parte real do sinal senoidal\n        parte_real = np.cos(fase)\n\
      \        # Gera a parte imagin\xE1ria do sinal senoidal\n        parte_imaginaria\
      \ = np.sin(fase)\n        \n        # Combina a parte real e imagin\xE1ria para\
      \ formar um sinal complexo\n        output_items[0][:] = parte_real + 1j * parte_imaginaria\n\
      \        \n        return len(output_items[0])  # Retorna o n\xFAmero de amostras\
      \ processadas\n\n# Bloco de c\xF3digo que executa se o script for rodado diretamente\n\
      if __name__ == '__main__':\n    from gnuradio import blocks  # Importa m\xF3\
      dulos adicionais do GNU Radio\n    from gnuradio import qtgui  # Importa m\xF3\
      dulo para visualiza\xE7\xE3o de dados com Qt\n    from PyQt5 import Qt  # Importa\
      \ PyQt5 para interface gr\xE1fica\n    import sys  # Importa sys para manipula\xE7\
      \xE3o de argumentos e sistema\n\n    # Cria um fluxo de dados GNU Radio\n  \
      \  tb = gr.top_block()\n\n    # Configura os blocos\n    taxa_amostragem = 1.0e6\
      \  # Define a taxa de amostragem\n\n    # Instancia o bloco GeradorSenoide com\
      \ a taxa de amostragem definida\n    bloco_senoide = GeradorSenoide(taxa_amostragem=taxa_amostragem)\n\
      \    # Cria um bloco de visualiza\xE7\xE3o de sinal no tempo para dados complexos\n\
      \    qt_sink = qtgui.time_sink_c(1024, taxa_amostragem, \"Senoide\")\n\n   \
      \ # Conecta o bloco GeradorSenoide \xE0 visualiza\xE7\xE3o qt_sink\n    tb.connect(bloco_senoide,\
      \ qt_sink)\n\n    # Configura a visualiza\xE7\xE3o do eixo Y na interface gr\xE1\
      fica\n    qt_sink.set_y_axis(-1, 1)\n    qt_sink.set_x_axis_unit(\"s\")  # Define\
      \ a unidade do eixo X como segundos\n    qt_sink.set_y_axis_unit(\"Amplitude\"\
      )  # Define a unidade do eixo Y como amplitude\n\n    # Inicia o fluxo de dados\
      \ GNU Radio\n    tb.start()\n\n    # Cria uma aplica\xE7\xE3o Qt\n    app =\
      \ Qt.QApplication(sys.argv)\n    qtgui_util = qtgui.util()  # Cria uma inst\xE2\
      ncia de utilit\xE1rio do QtGUI\n    qtgui_util.run()  # Executa a interface\
      \ gr\xE1fica Qt\n\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    taxa_amostragem: 1E6
  states:
    _io_cache: "('Frequ\xEAncia Doppler', 'GeradorSenoide', [('taxa_amostragem', '1000000.0')],\
      \ [], [('0', 'complex', 1)], '', ['taxa_amostragem'])"
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1824.0, 344]
    rotation: 270
    state: enabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport pmt\n\nclass\
      \ packet_counter(gr.sync_block):\n    def __init__(self):\n        gr.sync_block.__init__(self,\n\
      \            name=\"Contador de Pacotes\",\n            in_sig=None,\n     \
      \       out_sig=[np.uint8])  # Sa\xEDda como n\xFAmero de pacotes transmitidos\n\
      \n        self.packet_count = 0\n        self.valid_packet_count = 0  # Contador\
      \ de pacotes validados\n        self.max_packets = 700  # Limite total de pacotes\
      \ a serem transmitidos\n        self.message_port_register_in(pmt.intern(\"\
      in\"))  # Porta de entrada tipo char\n        self.set_msg_handler(pmt.intern(\"\
      in\"), self.handle_msg)\n\n        # Abre o arquivo para armazenar o resultado\n\
      \        self.file = open(\"/home/vinicius/Documentos/Amostras_Transmitidas.txt\"\
      , \"w\") #Aqui pode ser inserido o caminho para direcionamento do arquivo\n\n\
      \    def handle_msg(self, msg):\n        # Incrementa o contador total de pacotes\n\
      \        self.packet_count += 1\n\n        # Converte a mensagem para string\n\
      \        msg_str = pmt.symbol_to_string(msg)\n        \n        # Verifica se\
      \ a mensagem come\xE7a com \"TEST: \"\n        if msg_str.startswith(\"TEST:\
      \ \"):\n            self.valid_packet_count += 1\n        \n        # Verifica\
      \ se atingiu o n\xFAmero m\xE1ximo de pacotes\n        if self.packet_count\
      \ >= self.max_packets:\n            print(\"Limite de pacotes atingido. Parando\
      \ a execu\xE7\xE3o.\")\n            self.stop()  # Para a execu\xE7\xE3o quando\
      \ o limite \xE9 atingido\n\n        # Atualiza o arquivo ap\xF3s cada mensagem\n\
      \        self.file.seek(0)  # Move o cursor para o in\xEDcio do arquivo\n  \
      \      self.file.write(f\"Total de mensagens transmitidas: {self.packet_count}\\\
      n\")\n        self.file.write(f\"Total de mensagens v\xE1lidas transmitidas:\
      \ {self.valid_packet_count}\\n\")\n        self.file.truncate()  # Remove qualquer\
      \ dado remanescente do arquivo\n\n    def work(self, input_items, output_items):\n\
      \        # A sa\xEDda \xE9 o n\xFAmero total de pacotes v\xE1lidos transmitidos\n\
      \        output_items[0][:] = [self.valid_packet_count]\n        return len(output_items[0])\n\
      \n    def stop(self):\n        # Escreve no arquivo o total de pacotes transmitidos\
      \ no final do arquivo\n        if self.packet_count < self.max_packets:  # Para\
      \ garantir que n\xE3o sobrescreva antes de parar\n            self.file.seek(0)\n\
      \            self.file.write(f\"Total de mensagens transmitidas: {self.packet_count}\\\
      n\")\n            self.file.write(f\"Total de mensagens v\xE1lidas transmitidas:\
      \ {self.valid_packet_count}\\n\")\n            self.file.truncate()  # Remove\
      \ qualquer dado remanescente do arquivo\n        self.file.close()  # Fecha\
      \ o arquivo ao final\n        return gr.sync_block.stop(self)\n\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Contador de Pacotes', 'packet_counter', [], [('in', 'message', 1)],
      [('0', 'byte', 1)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 672.0]
    rotation: 0
    state: true
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: from math import pi
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1640, 40.0]
    rotation: 0
    state: true
- name: lora_sdr_add_crc_0
  id: lora_sdr_add_crc
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    has_crc: has_crc
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [712, 264.0]
    rotation: 0
    state: enabled
- name: lora_sdr_crc_verif_0
  id: lora_sdr_crc_verif
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    output_crc_check: 'False'
    print_rx_msg: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 456.0]
    rotation: 180
    state: enabled
- name: lora_sdr_deinterleaver_0
  id: lora_sdr_deinterleaver
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    soft_decoding: soft_decoding
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [872, 480.0]
    rotation: 180
    state: enabled
- name: lora_sdr_dewhitening_0
  id: lora_sdr_dewhitening
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 472.0]
    rotation: 180
    state: enabled
- name: lora_sdr_fft_demod_0
  id: lora_sdr_fft_demod
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    max_log_approx: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    soft_decoding: soft_decoding
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1208, 480.0]
    rotation: 180
    state: enabled
- name: lora_sdr_frame_sync_0
  id: lora_sdr_frame_sync
  parameters:
    affinity: ''
    alias: ''
    bandwidth: bw
    center_freq: int(center_freq)
    comment: ''
    impl_head: impl_head
    maxoutbuf: '0'
    minoutbuf: '0'
    os_factor: int(samp_rate/bw)
    preamb_len: preamb_len
    sf: sf
    show_log_port: 'False'
    sync_word: sync_word
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1400, 448.0]
    rotation: 180
    state: enabled
- name: lora_sdr_gray_demap_0
  id: lora_sdr_gray_demap
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    sf: sf
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1152, 264.0]
    rotation: 0
    state: enabled
- name: lora_sdr_gray_mapping_0
  id: lora_sdr_gray_mapping
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    soft_decoding: soft_decoding
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1032, 480.0]
    rotation: 180
    state: enabled
- name: lora_sdr_hamming_dec_0
  id: lora_sdr_hamming_dec
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    soft_decoding: soft_decoding
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [696, 480.0]
    rotation: 180
    state: enabled
- name: lora_sdr_hamming_enc_0
  id: lora_sdr_hamming_enc
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    cr: cr
    maxoutbuf: '0'
    minoutbuf: '0'
    sf: sf
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 256.0]
    rotation: 0
    state: enabled
- name: lora_sdr_header_0
  id: lora_sdr_header
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    cr: cr
    has_crc: has_crc
    impl_head: impl_head
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [568, 248.0]
    rotation: 0
    state: enabled
- name: lora_sdr_header_decoder_0
  id: lora_sdr_header_decoder
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    cr: cr
    has_crc: has_crc
    impl_head: impl_head
    ldro: '2'
    maxoutbuf: '0'
    minoutbuf: '0'
    pay_len: pay_len
    print_header: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 464.0]
    rotation: 180
    state: enabled
- name: lora_sdr_interleaver_0
  id: lora_sdr_interleaver
  parameters:
    affinity: ''
    alias: ''
    bw: bw
    comment: ''
    cr: cr
    ldro: '2'
    maxoutbuf: '0'
    minoutbuf: '0'
    sf: sf
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1000, 240.0]
    rotation: 0
    state: enabled
- name: lora_sdr_modulate_0
  id: lora_sdr_modulate
  parameters:
    affinity: ''
    alias: ''
    bw: bw
    comment: ''
    frame_zero_padd: int(20*2**sf*samp_rate/bw)
    maxoutbuf: '0'
    minoutbuf: '10000000'
    preamb_len: preamb_len
    samp_rate: int(samp_rate)
    sf: sf
    sync_words: sync_word
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1328, 248.0]
    rotation: 0
    state: enabled
- name: lora_sdr_payload_id_inc_0
  id: lora_sdr_payload_id_inc
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    separator: ':'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [104, 200.0]
    rotation: 180
    state: enabled
- name: lora_sdr_whitening_0
  id: lora_sdr_whitening
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    is_hex: 'False'
    length_tag_name: '''packet_len'''
    maxoutbuf: '0'
    minoutbuf: '0'
    separator: ''','''
    source_type: message_strobe
    use_length_tag: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [344, 264.0]
    rotation: 0
    state: true

connections:
- [analog_pll_freqdet_cf_0, '0', epy_block_0, '0']
- [blocks_message_strobe_0_0, strobe, lora_sdr_payload_id_inc_0, msg_in]
- [blocks_message_strobe_0_0, strobe, lora_sdr_whitening_0, msg]
- [blocks_multiply_xx_0, '0', analog_pll_freqdet_cf_0, '0']
- [blocks_multiply_xx_0, '0', blocks_multiply_xx_1, '1']
- [blocks_multiply_xx_0, '0', lora_sdr_frame_sync_0, '0']
- [blocks_multiply_xx_1, '0', lora_sdr_frame_sync_0, '0']
- [blocks_throttle_0, '0', channels_channel_model_0, '0']
- [channels_channel_model_0, '0', blocks_multiply_xx_0, '0']
- [epy_block_0, '0', blocks_multiply_xx_1, '0']
- [epy_block_1, '0', blocks_multiply_xx_0, '1']
- [epy_block_2, '0', blocks_file_sink_1, '0']
- [lora_sdr_add_crc_0, '0', lora_sdr_hamming_enc_0, '0']
- [lora_sdr_crc_verif_0, '0', blocks_file_sink_0, '0']
- [lora_sdr_crc_verif_0, msg, epy_block_2, in]
- [lora_sdr_deinterleaver_0, '0', lora_sdr_hamming_dec_0, '0']
- [lora_sdr_dewhitening_0, '0', lora_sdr_crc_verif_0, '0']
- [lora_sdr_fft_demod_0, '0', lora_sdr_gray_mapping_0, '0']
- [lora_sdr_frame_sync_0, '0', lora_sdr_fft_demod_0, '0']
- [lora_sdr_gray_demap_0, '0', lora_sdr_modulate_0, '0']
- [lora_sdr_gray_mapping_0, '0', lora_sdr_deinterleaver_0, '0']
- [lora_sdr_hamming_dec_0, '0', lora_sdr_header_decoder_0, '0']
- [lora_sdr_hamming_enc_0, '0', lora_sdr_interleaver_0, '0']
- [lora_sdr_header_0, '0', lora_sdr_add_crc_0, '0']
- [lora_sdr_header_decoder_0, '0', lora_sdr_dewhitening_0, '0']
- [lora_sdr_header_decoder_0, frame_info, lora_sdr_frame_sync_0, frame_info]
- [lora_sdr_interleaver_0, '0', lora_sdr_gray_demap_0, '0']
- [lora_sdr_modulate_0, '0', blocks_throttle_0, '0']
- [lora_sdr_payload_id_inc_0, msg_out, blocks_message_strobe_0_0, set_msg]
- [lora_sdr_whitening_0, '0', lora_sdr_header_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.3.0
